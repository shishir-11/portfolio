<h1>GSoC Community Bonding Period</h1><h2>What is the community bonding period?</h2><p>The GSoC Bonding Period allows us to setup the project, interact with the community , get familiar with the documentation, or as I would like to put it, getting prepared for the coding period so you can start coding effectively.</p><p>Multiple interaction and QnA sessions were taken by Gooogle which to familiarise us with the entire process and also helped me get a new perspective on security, AI and inclusivity. The entire registration process was pretty smooth thanks to the entire team and my mentors who reminded and helped me through all the steps.</p><p><br></p><p> </p><h2>Discussions and Coding Period Start</h2><h3>An Existing Pull Request</h3><p>I will be working on the continuum_mechanics module this summer and started by a discussion on a previous issue in the Cable class with my mentors Advait Pote and Ishan Pandhare. Some improvements and failing doctests were discussed on GitHub as well as on a Meet. I will be spending my first week on fixing the precision tests and getting the PR merged.</p><p><br></p><h3>My initial attempts and failure</h3><p>The current Cable class accurately calculates the tensions, reactions etc. at various points under the presence of concentrated or distributed loads. For this purpose it take the coordinates of the lowest point for cable under distributed loads and performs it operations, an attempt was made by me to take length of the cable and find out the coordinates of this lowest point (or sag).</p><p>I attempted to form equations of a parabola and its length using a a formula for arc length. </p><p><br></p><pre class="ql-syntax hljs language-perl" spellcheck="false" data-highlighted="yes">x1, y1 = self._left_support
x2, y2 = self._right_support
<span class="hljs-keyword">length</span> = self._length


eq1 = E<span class="hljs-string">q(a * x1**2 + b * x1 + c, y1)</span>
eq2 = E<span class="hljs-string">q(a * x2**2 + b * x2 + c, y2)</span>
arc_length_expr = integrate(<span class="hljs-keyword">sqrt</span>(<span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a * <span class="hljs-keyword">x</span> + b)**<span class="hljs-number">2</span>),(<span class="hljs-keyword">x</span>, x1, x2))
</pre><p><br></p><p>However , I wasnâ€™t succeeding in getting a result and realised its due to the arc length formula and we might have to use a numerical method to get results. The current method , hence works fine until we are able to solve without a numerical solver.</p><p><br></p><h3>Further Improvements</h3><p>Some additions will be made to the Cable class in the form of a Draw method and changes in solver to get some additional results to be used in the Draw method. As an idea we can also make a method to solve for concentrated loads where length is predefined and positions have to be determined. Currently it works by validating if the positions of the loads is valid. This way the module can be improved further. I will attempt to do the same as a form of extended project.</p><p><br></p>